name: build

permissions:
  contents: write
  actions: read

on:
  pull_request:
    branches:
      - master
  push:
    tags:
      - 'v*'

jobs:
  build-windows:
    runs-on: windows-2022
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Crystal
        uses: crystal-lang/install-crystal@v1
        with:
          crystal: 1.13.2

      - name: Build SQLite3 static library
        run: "scripts/sqlite3-static.ps1"

      - name: Install shards dependencies
        run: shards install --production

      - name: Build coverage reporter CLI
        run: crystal build src\cli.cr -o dist\coveralls --release --static --no-debug --progress

      - name: Prepare distribution archive
        run: |
          cd dist
          $vsbase = vswhere.exe -products * -property installationPath -latest
          if (-not $vsbase) {
            Write-Error "Visual Studio installation not found"
            exit 1
          }
          $dumpbinPath = Join-Path $vsbase "VC\Tools\MSVC\*\bin\HostX64\x64\dumpbin.exe"
          $resolvedDumpbin = Get-Item $dumpbinPath | Select-Object -First 1
          if (-not $resolvedDumpbin) {
            Write-Error "dumpbin.exe not found"
            exit 1
          }
          & $resolvedDumpbin /dependents coveralls.exe
          tar -acf coveralls-windows.zip coveralls.exe

      - name: Upload exe
        uses: actions/upload-artifact@v4
        with:
          name: coveralls-windows.exe
          path: dist/coveralls.exe
          if-no-files-found: error

      - name: Upload zip
        uses: actions/upload-artifact@v4
        with:
          name: coveralls-windows.zip
          path: dist/coveralls-windows.zip
          if-no-files-found: error

  build-linux:
    runs-on: ubuntu-latest
    outputs:
      x86_64_binary: ${{ steps.build.outputs.coveralls_x86_64 }}
      aarch64_binary: ${{ steps.build.outputs.coveralls_aarch64 }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Crystal
        uses: crystal-lang/install-crystal@v1
        with:
          crystal: 1.13.2

      - name: Install shards dependencies
        run: shards install --production

      - name: Build cross-compilation container
        run: make build-xbuild-container

      - name: Build cross-compiled linux binaries
        id: build
        run: make compile-and-strip-all

      # Debug step to verify what files are in the dist/ directory
      - name: List files in dist/ directory
        run: ls -la dist/

      - name: Package linux binaries
        run: |
          make package
          echo "coveralls_x86_64=dist/coveralls-linux-x86_64" >> $GITHUB_OUTPUT
          echo "coveralls_aarch64=dist/coveralls-linux-aarch64" >> $GITHUB_OUTPUT

      # Debug step to verify what files are in the dist/ directory
      - name: List files in dist/ directory
        run: ls -la dist/

      - name: Upload linux binaries
        uses: actions/upload-artifact@v4
        with:
          name: coveralls-linux-binaries
          path: dist/*
          if-no-files-found: error

  test-linux-x86_64:
    runs-on: ubuntu-latest
    needs: build-linux
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # # Download the coverage report generated from ci.yml
      # - name: Download coverage report
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: coverage-report
      #     path: ./coverage/
      
      # Set executable permissions for x86_64 binary and check version
      - name: Test x86_64 binary
        run: |
          binary=${{ needs.build-linux.outputs.x86_64_binary }}
          chmod +x $binary
          $binary --version

      # # Report coverage using the x86_64 binary
      # - name: Report coverage with x86_64 binary
      #   env:
      #     COVERALLS_REPO_TOKEN: ${{ github.token }}
      #   run: |
      #     binary=${{ needs.build-linux.outputs.x86_64_binary }}
      #     cd coverage
      #     $binary report --measure --base-path src/coverage_reporter/

  test-linux-aarch64:
    runs-on: ubuntu-latest
    needs: build-linux
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # # Download the coverage report generated from ci.yml
      # - name: Download coverage report
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: coverage-report
      #     path: ./coverage/
      
      # Set executable permissions for aarch64 binary and check version
      - name: Test aarch64 binary in QEMU
        run: |
          binary=${{ needs.build-linux.outputs.aarch64_binary }}
          chmod +x $binary
          sudo apt-get update
          sudo apt-get install -y qemu-user
          qemu-aarch64 $binary --version

      # # Report coverage using the tested aarch64 binary
      # - name: Report coverage with aarch64 binary
      #   env:
      #     COVERALLS_REPO_TOKEN: ${{ github.token }}
      #   run: |
      #     binary=${{ needs.build-linux.outputs.aarch64_binary }}
      #     cd coverage
      #     qemu-aarch64 $binary report --measure --base-path src/coverage_reporter/

  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --force --tags

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare files for release
        run: |
          mkdir release/
          find artifacts/ -type f -exec cp \{} release/ \;
          cd release/
          mv coveralls coveralls-linux
          mv coveralls.exe coveralls-windows.exe
          sha256sum * > coveralls-checksums.txt

      - name: Create Github release
        env:
          TAG: ${{ github.ref }}
          GH_TOKEN: ${{ github.token }}
        run: >
          cd release/;
          gh release create ${TAG}
          'coveralls-linux-x86_64#coveralls-linux'
          'coveralls-linux-x86_64.tar.gz#coveralls-linux.tar.gz'
          'coveralls-linux-x86_64#coveralls-linux-x86_64' \
          'coveralls-linux-x86_64.tar.gz#coveralls-linux-x86_64.tar.gz' \
          'coveralls-linux-aarch64#coveralls-linux-aarch64' \
          'coveralls-linux-aarch64.tar.gz#coveralls-linux-aarch64.tar.gz' \
          'coveralls-windows.exe#coveralls-windows.exe'
          'coveralls-windows.zip#coveralls-windows.zip'
          'coveralls-checksums.txt#coveralls-checksums.txt'
          --generate-notes

  homebrew:
    runs-on: ubuntu-latest
    needs: [release]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    continue-on-error: true
    steps:
      - name: Update Homebrew formula
        uses: dawidd6/action-homebrew-bump-formula@v3
        with:
          tap: coverallsapp/coveralls
          formula: coveralls
          token: ${{ secrets.HOMEBREW_TOKEN }}
